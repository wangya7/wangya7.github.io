<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>半農</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://bannong.wang/"/>
  <updated>2020-12-06T08:13:08.215Z</updated>
  <id>http://bannong.wang/</id>
  
  <author>
    <name>半農</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Dubbo-SPI&amp;自适应的扩展机制</title>
    <link href="http://bannong.wang/2020/12/03/Dubbo-SPI/"/>
    <id>http://bannong.wang/2020/12/03/Dubbo-SPI/</id>
    <published>2020-12-03T13:51:44.000Z</published>
    <updated>2020-12-06T08:13:08.215Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://dubbo.apache.org/zh/docs/v2.7/dev/source/adaptive-extension/" target="_blank" rel="noopener">官方文档-SPI 自适应拓展</a></p><blockquote><p>推荐阅读官方文档</p></blockquote><p>JDK的SPI是一种服务发现机制。SPI将接口的实现类全限定名配置在文件中，由服务加载器读取配置文件，加载实现类，这样可以在运行期间动态的替换实现类。默认的加载路径为<strong>META-INF/services</strong>，通过<strong>ServiceLoader</strong>实现加载。<br>Dubbo实现了增强的SPI机制。Dubbo的SPI相关逻辑被封装在ExtensionLoader中，通过其加载指定的实现类。相比于JDK的路径，Dubbo将配置文件放置在META-INF/dubbo主路径下，同时采用了键值对的形式。</p><p>主要分析 com.alibaba.dubbo.common.extension.ExtensionLoader</p><h4 id="Case-1"><a href="#Case-1" class="headerlink" title="Case-1"></a>Case-1</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>    <span class="meta">@Test</span></span><br><span class="line"><span class="number">2</span>    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">robotTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="number">3</span>        ExtensionLoader&lt;Robot&gt; extensionLoader = ExtensionLoader.getExtensionLoader(Robot<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="number">4</span>        Robot optimusPrime = extensionLoader.getExtension(<span class="string">"optimusPrime"</span>);</span><br><span class="line"><span class="number">5</span>        optimusPrime.hi();</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span>        Robot bumblebee = extensionLoader.getExtension(<span class="string">"bumblebee"</span>);</span><br><span class="line"><span class="number">8</span>        bumblebee.hi();</span><br><span class="line"><span class="number">9</span>    &#125;</span><br></pre></td></tr></table></figure><h5 id="①初始化type对应ExtensionLoader对象的objectFactory成员变量"><a href="#①初始化type对应ExtensionLoader对象的objectFactory成员变量" class="headerlink" title="①初始化type对应ExtensionLoader对象的objectFactory成员变量"></a>①初始化type对应ExtensionLoader对象的objectFactory成员变量</h5><p>1行代码通过 ExtensionLoader.getExtensionLoader(Robot.class); 这行代码就必须走到 new ExtensionLoader<T>(type)。<br>其实这1行代码就是说初始化 ExtensionFactory 的实现，默认是首先加载 ExtensionFactory.class 然后调用了 getAdaptiveExtension()获取自适应拓展</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtension</span><br></pre></td></tr></table></figure><p>这个方法就是核心需要理解的啦。</p><ol><li>调用 getAdaptiveExtensionClass 方法获取自适应拓展 Class 对象</li><li>通过反射进行实例化</li><li>调用 injectExtension 方法向拓展实例中注入依赖<br>每个步骤里面又细分，尤其是第一步比较精彩！这里面把第1步拿出来说一下。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. 调用 getExtensionClasses 获取所有的拓展类</span></span><br><span class="line"><span class="comment"> * 2. 检查缓存，若缓存不为空，则返回缓存</span></span><br><span class="line"><span class="comment"> * 3. 若缓存为空，则调用 createAdaptiveExtensionClass 创建自适应拓展类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 首先从第一个逻辑说起，getExtensionClasses 这个方法用于获取某个接口的所有实现类。比如该方法可以获取</span></span><br><span class="line"><span class="comment"> * Protocol 接口的 DubboProtocol、HttpProtocol、InjvmProtocol 等实现类。在获取实现类的过程中，</span></span><br><span class="line"><span class="comment"> * 如果某个实现类被 Adaptive 注解修饰了，那么该类就会被赋值给 cachedAdaptiveClass 变量。此时，上面步</span></span><br><span class="line"><span class="comment"> * 骤中的第二步条件成立（缓存不为空），直接返回 cachedAdaptiveClass 即可。如果所有的实现类均未被</span></span><br><span class="line"><span class="comment"> * Adaptive 注解修饰，那么执行第三步逻辑，创建自适应拓展类。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Class&lt;?&gt; getAdaptiveExtensionClass() &#123;</span><br><span class="line">    <span class="comment">// 通过 SPI 获取所有的拓展类</span></span><br><span class="line">    getExtensionClasses();</span><br><span class="line">    <span class="keyword">if</span> (cachedAdaptiveClass != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> cachedAdaptiveClass;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 创建自适应拓展类</span></span><br><span class="line">    <span class="keyword">return</span> cachedAdaptiveClass = createAdaptiveExtensionClass();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>运行代码的时候，会发现 ExtensionFactory 包含两个实现，其中有一个被 @Adaptive 修饰的 AdaptiveExtensionFactory，其实这个在getExtensionClasses内部会初始化赋值给cachedAdaptiveClass，所以return cachedAdaptiveClass;直接返回啦。</li></ol><h5 id="②type对应ExtensionLoader对象获取对应名称所对应的实现类"><a href="#②type对应ExtensionLoader对象获取对应名称所对应的实现类" class="headerlink" title="②type对应ExtensionLoader对象获取对应名称所对应的实现类"></a>②type对应ExtensionLoader对象获取对应名称所对应的实现类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Robot optimusPrime = extensionLoader.getExtension(<span class="string">"optimusPrime"</span>);</span><br></pre></td></tr></table></figure><p>这个就没有啥子说的啦，自己追代码</p><p>第1个Case就是通过Class.forName加载。</p><p>dubbo通过自实现的SPI来实现扩展，配置切换。 比如Protocol、Cluster、LoadBalance 等。当某些扩展不想在框架启动时候加载，<br>而希望扩展方法条用的时候，根据运行时参数进行加载。  —— 扩展未加载，难道可以使用扩展的方法？<br>dubbo通过自适应拓展机制很好的解决了，dubbo 会为拓展接口生成具有代理功能的代码，然后通过 javassist 或 jdk 编译这段<br>代码得到Class类，最后再通过反射创建代理类。</p><p>@Adaptive用在类上面，基本上都是显现类使用，这个实现类就是这个接口的默认实现（比如上面说的 AdaptiveExtensionFactory）；但是这个注解多数使用在方法上。</p><h4 id="Case-2"><a href="#Case-2" class="headerlink" title="Case-2"></a>Case-2</h4><p>下面的测试引用com.alibaba.dubbo.common.extensionloader.ExtensionLoader_Adaptive_Test#test_getAdaptiveExtension_inject，为了方便阅读源码，做了稍微的修改。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span>    <span class="meta">@Test</span></span><br><span class="line"> <span class="number">2</span>    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_getAdaptiveExtension_inject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"> <span class="number">3</span>        LogUtil.start();</span><br><span class="line"> <span class="number">4</span>        ExtensionLoader&lt;Ext6&gt; el = ExtensionLoader.getExtensionLoader(Ext6<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"> <span class="number">5</span>        Ext6 ext = el.getAdaptiveExtension();</span><br><span class="line"> <span class="number">6</span></span><br><span class="line"> <span class="number">7</span>        URL url = <span class="keyword">new</span> URL(<span class="string">"p1"</span>, <span class="string">"1.2.3.4"</span>, <span class="number">1010</span>, <span class="string">"path1"</span>);</span><br><span class="line"> <span class="number">8</span>        url = url.addParameters(<span class="string">"ext6"</span>, <span class="string">"impl1"</span>);</span><br><span class="line"> <span class="number">9</span></span><br><span class="line"><span class="number">10</span>        String ans = ext.echo(url, <span class="string">"ha"</span>);</span><br><span class="line"><span class="number">11</span>        assertEquals(<span class="string">"Ext6Impl1-echo-Ext1Impl1-echo"</span>, ans);</span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">13</span>        Assert.assertTrue(<span class="string">"can not find error."</span>, LogUtil.checkNoError());</span><br><span class="line"><span class="number">14</span>        LogUtil.stop();</span><br><span class="line"><span class="number">15</span></span><br><span class="line"><span class="number">16</span>        <span class="comment">// simple.ext 对应 SimpleExt</span></span><br><span class="line"><span class="number">17</span>        url = url.addParameters(<span class="string">"simple.ext"</span>, <span class="string">"impl2"</span>);</span><br><span class="line"><span class="number">18</span>        ans = ext.echo(url, <span class="string">"ha"</span>)</span><br><span class="line"><span class="number">19</span>        assertEquals(<span class="string">"Ext6Impl1-echo-Ext1Impl2-echo"</span>, ans);</span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="number">21</span>    &#125;</span><br></pre></td></tr></table></figure><p>第4行代码已经在上个case分析过啦，现在分析第5行获取一个自适应的扩展。其实入口也是第4行处理ExtensionFactory加载需要走到的逻辑createAdaptiveExtension，那么为什么上面没有走到 createAdaptiveExtensionClassCode 方法呢？————是因为ExtensionFactory的实现类 AdaptiveExtensionFactory 被 @Adaptive 标注啦。</p><p>因为其被@Adaptive标注，在获取所有的拓展类getExtensionClasses逻辑中会赋值cachedAdaptiveClass成员变量。具体的赋值逻辑在loadClass方法中。</p><p>我们回头看一下在没有实现类被@Adaptive标注的情况下，Dubbo是怎做自适应扩展的？</p><p>下面再重温这段代码吧</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. 调用 getAdaptiveExtensionClass 方法获取自适应拓展 Class 对象</span></span><br><span class="line"><span class="comment"> * 2. 通过反射进行实例化</span></span><br><span class="line"><span class="comment"> * 3. 调用 injectExtension 方法向拓展实例中注入依赖</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line"><span class="function"><span class="keyword">private</span> T <span class="title">createAdaptiveExtension</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> injectExtension((T) getAdaptiveExtensionClass().newInstance());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Can not create adaptive extension "</span> + type + <span class="string">", cause: "</span> + e.getMessage(), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. 调用 getExtensionClasses 获取所有的拓展类</span></span><br><span class="line"><span class="comment"> * 2. 检查缓存，若缓存不为空，则返回缓存</span></span><br><span class="line"><span class="comment"> * 3. 若缓存为空，则调用 createAdaptiveExtensionClass 创建自适应拓展类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 首先从第一个逻辑说起，getExtensionClasses 这个方法用于获取某个接口的所有实现类。比如该方法可以获取</span></span><br><span class="line"><span class="comment"> * Protocol 接口的 DubboProtocol、HttpProtocol、InjvmProtocol 等实现类。在获取实现类的过程中，</span></span><br><span class="line"><span class="comment"> * 如果某个实现类被 Adaptive 注解修饰了，那么该类就会被赋值给 cachedAdaptiveClass 变量。此时，上面步</span></span><br><span class="line"><span class="comment"> * 骤中的第二步条件成立（缓存不为空），直接返回 cachedAdaptiveClass 即可。如果所有的实现类均未被</span></span><br><span class="line"><span class="comment"> * Adaptive 注解修饰，那么执行第三步逻辑，创建自适应拓展类。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Class&lt;?&gt; getAdaptiveExtensionClass() &#123;</span><br><span class="line">    <span class="comment">// 通过 SPI 获取所有的拓展类</span></span><br><span class="line">    getExtensionClasses();</span><br><span class="line">    <span class="keyword">if</span> (cachedAdaptiveClass != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> cachedAdaptiveClass;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 创建自适应拓展类</span></span><br><span class="line">    <span class="keyword">return</span> cachedAdaptiveClass = createAdaptiveExtensionClass();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Class&lt;?&gt; createAdaptiveExtensionClass() &#123;</span><br><span class="line">    <span class="comment">// 构建自适应拓展代码</span></span><br><span class="line">    String code = createAdaptiveExtensionClassCode();</span><br><span class="line">    ClassLoader classLoader = findClassLoader();</span><br><span class="line">    <span class="comment">// 获取编译器实现类</span></span><br><span class="line">    com.alibaba.dubbo.common.compiler.Compiler compiler = ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.compiler.Compiler<span class="class">.<span class="keyword">class</span>).<span class="title">getAdaptiveExtension</span>()</span>;</span><br><span class="line">    <span class="comment">// 编译代码，生成 Class</span></span><br><span class="line">    <span class="keyword">return</span> compiler.compile(code, classLoader);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 其实很简单  找个案例跑一下   比如 com.alibaba.dubbo.remoting.Transporter  或者  com.alibaba.dubbo.rpc.Protocol</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 默认生成一个代理类的字符串编码 &#123;name&#125;$Adaptive</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">createAdaptiveExtensionClassCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="comment">//...省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过createAdaptiveExtensionClassCode创建实现类的代码如下，为了方便阅读把全类名修改成简单的类名。可以断点到createAdaptiveExtensionClass中查看code变量值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alibaba.dubbo.common.extensionloader.ext6_inject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.common.extension.ExtensionLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ext6</span>$<span class="title">Adaptive</span> <span class="keyword">implements</span> <span class="title">Ext6</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> java.lang.<span class="function">String <span class="title">echo</span><span class="params">(URL arg0, java.lang.String arg1)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (arg0 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"url == null"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        URL url = arg0;</span><br><span class="line">        String extName = url.getParameter(<span class="string">"ext6"</span>);</span><br><span class="line">        <span class="keyword">if</span>(extName == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Fail to get extension(Ext6) name from url("</span></span><br><span class="line">                    + url.toString() + <span class="string">") use keys([ext6])"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Ext6 extension = ExtensionLoader.getExtensionLoader(Ext6<span class="class">.<span class="keyword">class</span>).<span class="title">getExtension</span>(<span class="title">extName</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> extension.echo(arg0, arg1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过code值就能大体看出来createAdaptiveExtensionClassCode方法做了啥事。而后对这个Ext6$Adaptive类加载实例化赋值给测试代码第5行的ext变量。紧接着走到第10行，执行ext的echo()。自适应加载过程中，配置信息全部放在url中，通过url变量进行控制。其实真实执行的实现类的下面这句代码：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ext6 extension = ExtensionLoader.getExtensionLoader(Ext6.class).getExtension(url.getParameter("ext6"));</span><br></pre></td></tr></table></figure><p>因为我们url中”ext6”的参数值”impl1”，所以其实实现类就是com.alibaba.dubbo.common.extensionloader.ext6_inject.impl.Ext6Impl1。在创建的过程中需要调用 injectExtension 方法向拓展实例中注入依赖，看一下 Ext6Impl1 的定义，存在 setExt1 和 setDao 两个方法。注入的主要实现通过objectFactory.getExtension(pt, property) 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; com.alibaba.dubbo.common.extension.ExtensionLoader#injectExtension</span><br><span class="line"></span><br><span class="line">Class&lt;?&gt; pt &#x3D; method.getParameterTypes()[0];</span><br><span class="line">try &#123;</span><br><span class="line">    String property &#x3D; method.getName().length() &gt; 3 ?</span><br><span class="line">            method.getName().substring(3, 4).toLowerCase() + method.getName().substring(4) : &quot;&quot;;</span><br><span class="line">    Object object &#x3D; objectFactory.getExtension(pt, property);进行注入，</span><br><span class="line">    if (object !&#x3D; null) &#123;</span><br><span class="line">        method.invoke(instance, object);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">    logger.error(&quot;fail to inject via method &quot; + method.getName()</span><br><span class="line">            + &quot; of interface &quot; + type.getName() + &quot;: &quot; + e.getMessage(), e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>objectFactory默认实现是AdaptiveExtensionFactory，但是通过其成员变量factories依次进行加载，默认是SpiExtensionFactory加载被@SPI注解修改的类型。所以Ext6Impl1中的成员变量SimpleExt ext1会被加载。</p><p>加载的时候因为 SimpleExt 的实现类都没有带有 @Adaptive 注解，所以像 Ext6$Adaptive 形式加载。<br>但是因为 SimpleExt 接口定义的时候方法使用 @Adaptive，所以生成的代码逻辑比 Ext6$Adaptive 复杂。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SPI</span>(<span class="string">"impl1"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SimpleExt</span> </span>&#123;</span><br><span class="line">    <span class="comment">// @Adaptive example, do not specify a explicit key.</span></span><br><span class="line">    <span class="meta">@Adaptive</span></span><br><span class="line">    <span class="function">String <span class="title">echo</span><span class="params">(URL url, String s)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Adaptive</span>(&#123;<span class="string">"key1"</span>, <span class="string">"key2"</span>&#125;)</span><br><span class="line">    <span class="function">String <span class="title">yell</span><span class="params">(URL url, String s)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// no @Adaptive</span></span><br><span class="line">    <span class="function">String <span class="title">bang</span><span class="params">(URL url, <span class="keyword">int</span> i)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alibaba.dubbo.common.extensionloader.ext1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.common.extension.ExtensionLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleExt</span>$<span class="title">Adaptive</span> <span class="keyword">implements</span> <span class="title">SimpleExt</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">echo</span><span class="params">(URL arg0, String arg1)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (arg0 == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"url == null"</span>);</span><br><span class="line">        URL url = arg0;</span><br><span class="line">        String extName = url.getParameter(<span class="string">"simple.ext"</span>, <span class="string">"impl1"</span>);</span><br><span class="line">        <span class="keyword">if</span> (extName == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Fail to get extension(SimpleExt) name from url("</span></span><br><span class="line">                    + url.toString() + <span class="string">") use keys([simple.ext])"</span>);</span><br><span class="line">        SimpleExt extension = (SimpleExt) ExtensionLoader.getExtensionLoader(SimpleExt<span class="class">.<span class="keyword">class</span>).<span class="title">getExtension</span>(<span class="title">extName</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> extension.echo(arg0, arg1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">yell</span><span class="params">(URL arg0, String arg1)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (arg0 == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"url == null"</span>);</span><br><span class="line">        URL url = arg0;</span><br><span class="line">        String extName = url.getParameter(<span class="string">"key1"</span>, url.getParameter(<span class="string">"key2"</span>, <span class="string">"impl1"</span>));</span><br><span class="line">        <span class="keyword">if</span> (extName == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Fail to get extension(SimpleExt) name from url("</span></span><br><span class="line">                    + url.toString() + <span class="string">") use keys([key1, key2])"</span>);</span><br><span class="line">        SimpleExt extension = (SimpleExt) ExtensionLoader.getExtensionLoader(SimpleExt<span class="class">.<span class="keyword">class</span>).<span class="title">getExtension</span>(<span class="title">extName</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> extension.yell(arg0, arg1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">bang</span><span class="params">(URL arg0, <span class="keyword">int</span> arg1)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"method public abstract String SimpleExt.bang(URL,int) of interface SimpleExt is not adaptive method!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现带有制定的默认值，参数的设置也是有规则的，所以建议阅读 createAdaptiveExtensionClassCode 方法，阅读的时候参考开头推荐的官网源码就很简单。</p><p>最后构造好实例执行 echo 方法。</p><p>这里就可以看出来URL的作用，相当于数据总线，通过其绑定配置信息</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li><input disabled="" type="checkbox"> 后期补上 <strong>目的</strong> <strong>如何设计</strong> <strong>如何实现</strong> <strong>优缺点</strong></li></ul><p>熟悉 ExtensionLoader.getExtensionLoader(type) 这种俄罗斯套娃式的加载。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://dubbo.apache.org/zh/docs/v2.7/dev/source/adaptive-extension/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方文档-SPI 自适应拓展&lt;/a&gt;&lt;/p&gt;
&lt;bloc
      
    
    </summary>
    
    
    
      <category term="源码阅读" scheme="http://bannong.wang/tags/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    
      <category term="Dubbo" scheme="http://bannong.wang/tags/Dubbo/"/>
    
  </entry>
  
  <entry>
    <title>个人博客搭建</title>
    <link href="http://bannong.wang/2020/06/18/Blog/"/>
    <id>http://bannong.wang/2020/06/18/Blog/</id>
    <published>2020-06-18T08:31:44.753Z</published>
    <updated>2020-12-03T13:44:37.006Z</updated>
    
    <content type="html"><![CDATA[<p>📰本博客采用<a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>，资源直接托管在<a href="https://github.com/" target="_blank" rel="noopener">Github</a>。<br>⚙️关于如果操作，Hexo已经提供文档，自己搜索🔎也行，这面推荐cofess主题作者的<a href="https://blog.cofess.com/2017/04/09/hexo-builds-a-personal-blog-and-deploys-to-github.html" target="_blank" rel="noopener">一篇文章</a>。</p><h3 id="备忘关键操作"><a href="#备忘关键操作" class="headerlink" title="备忘关键操作"></a>备忘关键操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hexo new "我的博客"</span></span><br><span class="line">$ hexo n <span class="string">"我的博客"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># clean</span></span><br><span class="line">$ hexo clean</span><br><span class="line"></span><br><span class="line"><span class="comment"># hexo generate 生成静态页面</span></span><br><span class="line">$ hexo g</span><br><span class="line"></span><br><span class="line"><span class="comment"># hexo server 启动服务预览</span></span><br><span class="line">$ hexo s</span><br><span class="line"></span><br><span class="line"><span class="comment"># hexo deploy 部署</span></span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;📰本博客采用&lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;，资源直接托管在&lt;a href=&quot;https://github.com/&quot; target=&quot;_blank&quot; rel=&quot;noope
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
