<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>半農</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://bannong.wang/"/>
  <updated>2020-12-03T14:06:49.724Z</updated>
  <id>http://bannong.wang/</id>
  
  <author>
    <name>半農</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Dubbo-SPI&amp;自适应的扩展机制</title>
    <link href="http://bannong.wang/2020/12/03/Dubbo-SPI/"/>
    <id>http://bannong.wang/2020/12/03/Dubbo-SPI/</id>
    <published>2020-12-03T13:51:44.000Z</published>
    <updated>2020-12-03T14:06:49.724Z</updated>
    
    <content type="html"><![CDATA[<p><strong>META-INF/services</strong> 、<strong>ServiceLoader</strong><br>JDK的SPI是一种服务发现机制。SPI将接口的实现类全限定名配置在文件中，由服务加载器读取配置文件，加载实现类，这样可以在运行期间动态的替换实现类。<br>Dubbo实现了增强的SPI机制。Dubbo的SPI相关逻辑被封装在ExtensionLoader中，通过其加载指定的实现类。相比于JDK的路径，Dubbo将配置文件放置在META-INF/dubbo 路径下，同时采用了键值对的形式。</p><p><a href="http://dubbo.apache.org/zh-cn/docs/source_code_guide/adaptive-extension.html" target="_blank" rel="noopener">官方文档</a></p><p>SPI和Dubbo的自适应的扩展机制必须放在一起说，分不开的。<br>主要分析 com.alibaba.dubbo.common.extension.ExtensionLoader</p><h3 id="case-1-ExtensionLoaderTest-robotTest"><a href="#case-1-ExtensionLoaderTest-robotTest" class="headerlink" title="case 1.ExtensionLoaderTest.robotTest"></a>case 1.ExtensionLoaderTest.robotTest</h3><h4 id="一、初始化type对应ExtensionLoader对象的objectFactory成员变量"><a href="#一、初始化type对应ExtensionLoader对象的objectFactory成员变量" class="headerlink" title="一、初始化type对应ExtensionLoader对象的objectFactory成员变量"></a>一、初始化type对应ExtensionLoader对象的objectFactory成员变量</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ExtensionLoader&lt;Robot&gt; extensionLoader = ExtensionLoader.getExtensionLoader(Robot<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure><p>基础的区别于jdk的SPI加载实践<br>通过 ExtensionLoader.getExtensionLoader(Robot.class); 这行代码就必须走到 new ExtensionLoader<T>(type)。<br>其实这1行代码就是说初始化 ExtensionFactory 的实现，默认是首先加载 ExtensionFactory.class 然后调用了 getAdaptiveExtension()获取自适应拓展</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtension</span><br></pre></td></tr></table></figure><p>这个方法就是核心需要理解的啦。</p><ol><li>调用 getAdaptiveExtensionClass 方法获取自适应拓展 Class 对象</li><li>通过反射进行实例化</li><li>调用 injectExtension 方法向拓展实例中注入依赖<br>每个步骤里面又细分，尤其是第一步比较精彩！这里面把第1步拿出来说一下。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. 调用 getExtensionClasses 获取所有的拓展类</span></span><br><span class="line"><span class="comment"> * 2. 检查缓存，若缓存不为空，则返回缓存</span></span><br><span class="line"><span class="comment"> * 3. 若缓存为空，则调用 createAdaptiveExtensionClass 创建自适应拓展类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 首先从第一个逻辑说起，getExtensionClasses 这个方法用于获取某个接口的所有实现类。比如该方法可以获取</span></span><br><span class="line"><span class="comment"> * Protocol 接口的 DubboProtocol、HttpProtocol、InjvmProtocol 等实现类。在获取实现类的过程中，</span></span><br><span class="line"><span class="comment"> * 如果某个实现类被 Adaptive 注解修饰了，那么该类就会被赋值给 cachedAdaptiveClass 变量。此时，上面步</span></span><br><span class="line"><span class="comment"> * 骤中的第二步条件成立（缓存不为空），直接返回 cachedAdaptiveClass 即可。如果所有的实现类均未被</span></span><br><span class="line"><span class="comment"> * Adaptive 注解修饰，那么执行第三步逻辑，创建自适应拓展类。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Class&lt;?&gt; getAdaptiveExtensionClass() &#123;</span><br><span class="line">    <span class="comment">// 通过 SPI 获取所有的拓展类</span></span><br><span class="line">    getExtensionClasses();</span><br><span class="line">    <span class="keyword">if</span> (cachedAdaptiveClass != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> cachedAdaptiveClass;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 创建自适应拓展类</span></span><br><span class="line">    <span class="keyword">return</span> cachedAdaptiveClass = createAdaptiveExtensionClass();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>运行代码的时候，会发现 ExtensionFactory 包含两个实现，其中有一个被 @Adaptive 修饰的 AdaptiveExtensionFactory，其实这个在getExtensionClasses内部会初始化赋值给cachedAdaptiveClass，所以return cachedAdaptiveClass;直接返回啦。</li></ol><h4 id="二、type对应ExtensionLoader对象获取对应名称的实例对象"><a href="#二、type对应ExtensionLoader对象获取对应名称的实例对象" class="headerlink" title="二、type对应ExtensionLoader对象获取对应名称的实例对象"></a>二、type对应ExtensionLoader对象获取对应名称的实例对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Robot optimusPrime = extensionLoader.getExtension(<span class="string">"optimusPrime"</span>);</span><br></pre></td></tr></table></figure><p>这个就没有啥子说的啦，自己追代码</p><p>第1个case就是通过 Class.forName 加载   没啥好说的</p><p>dubbo通过自实现的SPI来实现扩展，配置切换。 比如Protocol、Cluster、LoadBalance 等。当某些扩展不想在框架启动时候加载，<br>而希望扩展方法条用的时候，根据运行时参数进行加载。  —— 扩展未加载，难道可以使用扩展的方法？<br>dubbo通过自适应拓展机制很好的解决了，dubbo 会为拓展接口生成具有代理功能的代码，然后通过 javassist 或 jdk 编译这段<br>代码得到Class类，最后再通过反射创建代理类。</p><p>@Adaptive用在类上面，基本上都是显现类使用，这个实现类就是这个接口的默认实现（比如上面说的 AdaptiveExtensionFactory）；但是这个注解多数使用在方法上。</p><h3 id="case-2-ExtensionLoader-Adaptive-Test-test-getAdaptiveExtension-inject"><a href="#case-2-ExtensionLoader-Adaptive-Test-test-getAdaptiveExtension-inject" class="headerlink" title="case 2.ExtensionLoader_Adaptive_Test.test_getAdaptiveExtension_inject"></a>case 2.ExtensionLoader_Adaptive_Test.test_getAdaptiveExtension_inject</h3><p>自适应加载测试<br>尤其需要注意 url增加参数的key和value。这需要和创建自适应的代理代码有关系，参考这个方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode</span><br></pre></td></tr></table></figure><p>其实入口也是上面的createAdaptiveExtension，那么为什么上面没有走到 createAdaptiveExtensionClassCode 方法呢？————是因为上面的 ExtensionFactory 的实现类 AdaptiveExtensionFactory 被 @Adaptive 标注啦。</p><p>下面再重温这段代码吧</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. 调用 getAdaptiveExtensionClass 方法获取自适应拓展 Class 对象</span></span><br><span class="line"><span class="comment"> * 2. 通过反射进行实例化</span></span><br><span class="line"><span class="comment"> * 3. 调用 injectExtension 方法向拓展实例中注入依赖</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line"><span class="function"><span class="keyword">private</span> T <span class="title">createAdaptiveExtension</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> injectExtension((T) getAdaptiveExtensionClass().newInstance());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Can not create adaptive extension "</span> + type + <span class="string">", cause: "</span> + e.getMessage(), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. 调用 getExtensionClasses 获取所有的拓展类</span></span><br><span class="line"><span class="comment"> * 2. 检查缓存，若缓存不为空，则返回缓存</span></span><br><span class="line"><span class="comment"> * 3. 若缓存为空，则调用 createAdaptiveExtensionClass 创建自适应拓展类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 首先从第一个逻辑说起，getExtensionClasses 这个方法用于获取某个接口的所有实现类。比如该方法可以获取</span></span><br><span class="line"><span class="comment"> * Protocol 接口的 DubboProtocol、HttpProtocol、InjvmProtocol 等实现类。在获取实现类的过程中，</span></span><br><span class="line"><span class="comment"> * 如果某个实现类被 Adaptive 注解修饰了，那么该类就会被赋值给 cachedAdaptiveClass 变量。此时，上面步</span></span><br><span class="line"><span class="comment"> * 骤中的第二步条件成立（缓存不为空），直接返回 cachedAdaptiveClass 即可。如果所有的实现类均未被</span></span><br><span class="line"><span class="comment"> * Adaptive 注解修饰，那么执行第三步逻辑，创建自适应拓展类。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Class&lt;?&gt; getAdaptiveExtensionClass() &#123;</span><br><span class="line">    <span class="comment">// 通过 SPI 获取所有的拓展类</span></span><br><span class="line">    getExtensionClasses();</span><br><span class="line">    <span class="keyword">if</span> (cachedAdaptiveClass != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> cachedAdaptiveClass;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 创建自适应拓展类</span></span><br><span class="line">    <span class="keyword">return</span> cachedAdaptiveClass = createAdaptiveExtensionClass();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Class&lt;?&gt; createAdaptiveExtensionClass() &#123;</span><br><span class="line">    <span class="comment">// 构建自适应拓展代码</span></span><br><span class="line">    String code = createAdaptiveExtensionClassCode();</span><br><span class="line">    ClassLoader classLoader = findClassLoader();</span><br><span class="line">    <span class="comment">// 获取编译器实现类</span></span><br><span class="line">    com.alibaba.dubbo.common.compiler.Compiler compiler = ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.compiler.Compiler<span class="class">.<span class="keyword">class</span>).<span class="title">getAdaptiveExtension</span>()</span>;</span><br><span class="line">    <span class="comment">// 编译代码，生成 Class</span></span><br><span class="line">    <span class="keyword">return</span> compiler.compile(code, classLoader);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 看完这段代码就点杯 喜茶</span></span><br><span class="line"><span class="comment"> * 其实很简单  找个案例跑一下   比如 com.alibaba.dubbo.remoting.Transporter  或者  com.alibaba.dubbo.rpc.Protocol</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 默认生成一个代理类的字符串编码 &#123;name&#125;$Adaptive</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">createAdaptiveExtensionClassCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="comment">//...省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="case-3-ExtensionLoader-Adaptive-Test-test-getAdaptiveExtension-customizeAdaptiveKey"><a href="#case-3-ExtensionLoader-Adaptive-Test-test-getAdaptiveExtension-customizeAdaptiveKey" class="headerlink" title="case 3.ExtensionLoader_Adaptive_Test.test_getAdaptiveExtension_customizeAdaptiveKey"></a>case 3.ExtensionLoader_Adaptive_Test.test_getAdaptiveExtension_customizeAdaptiveKey</h3><p>了解加载参数的样式</p><blockquote><p>补充一句，这里就可以看出来URL的作用 相当于数据总线 穿插在各个功能点 通过其绑定绑定配置信息</p></blockquote><h3 id="总结一下-可以借鉴的地方就是-动态生成代理类竟然可以这么玩，有点骚！"><a href="#总结一下-可以借鉴的地方就是-动态生成代理类竟然可以这么玩，有点骚！" class="headerlink" title="总结一下 可以借鉴的地方就是 动态生成代理类竟然可以这么玩，有点骚！"></a>总结一下 可以借鉴的地方就是 动态生成代理类竟然可以这么玩，有点骚！</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;META-INF/services&lt;/strong&gt; 、&lt;strong&gt;ServiceLoader&lt;/strong&gt;&lt;br&gt;JDK的SPI是一种服务发现机制。SPI将接口的实现类全限定名配置在文件中，由服务加载器读取配置文件，加载实现类，这样可以在运行期间动
      
    
    </summary>
    
    
    
      <category term="Dubbo" scheme="http://bannong.wang/tags/Dubbo/"/>
    
      <category term="Java" scheme="http://bannong.wang/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>个人博客搭建</title>
    <link href="http://bannong.wang/2020/06/18/Blog/"/>
    <id>http://bannong.wang/2020/06/18/Blog/</id>
    <published>2020-06-18T08:31:44.753Z</published>
    <updated>2020-12-03T13:44:37.006Z</updated>
    
    <content type="html"><![CDATA[<p>📰本博客采用<a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>，资源直接托管在<a href="https://github.com/" target="_blank" rel="noopener">Github</a>。<br>⚙️关于如果操作，Hexo已经提供文档，自己搜索🔎也行，这面推荐cofess主题作者的<a href="https://blog.cofess.com/2017/04/09/hexo-builds-a-personal-blog-and-deploys-to-github.html" target="_blank" rel="noopener">一篇文章</a>。</p><h3 id="备忘关键操作"><a href="#备忘关键操作" class="headerlink" title="备忘关键操作"></a>备忘关键操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hexo new "我的博客"</span></span><br><span class="line">$ hexo n <span class="string">"我的博客"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># clean</span></span><br><span class="line">$ hexo clean</span><br><span class="line"></span><br><span class="line"><span class="comment"># hexo generate 生成静态页面</span></span><br><span class="line">$ hexo g</span><br><span class="line"></span><br><span class="line"><span class="comment"># hexo server 启动服务预览</span></span><br><span class="line">$ hexo s</span><br><span class="line"></span><br><span class="line"><span class="comment"># hexo deploy 部署</span></span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;📰本博客采用&lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;，资源直接托管在&lt;a href=&quot;https://github.com/&quot; target=&quot;_blank&quot; rel=&quot;noope
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
